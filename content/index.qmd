---
title: Mise en production des projets de data science
subtitle: |
  [**[Romain Avouac, Lino Galiana]{.orange}**]{.orange}
# date: 
slide-number: true
footer: |
  Bonnes pratiques pour la mise en production des projets de data science
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  onyxia-revealjs:
  #onyxia-dark-revealjs:
    incremental: true 
    output-file: index.html
controls: true
css: custom.css
from: markdown+emoji
---

# Introduction

## Disclaimer

- Contenu en construction : [https://linogaliana.github.io/ensae-reproductibilite-website/](https://linogaliana.github.io/ensae-reproductibilite-website/)

- Programme large

- Applications guid√©es

## Contexte

- [**Qui sommes-nous ?**]{.orange}
    - des [**data scientists**]{.blue2} de l'Insee
    - frustr√©s par l'[**approche**]{.blue2} souvent purement [**technique**]{.blue2} de la data science
    - convaincus que les [**bonnes pratiques**]{.blue2} valent √† √™tre enseign√©es

- <romain.avouac@insee.fr>, <lino.galiana@insee.fr>

## La notion de mise en production

- [**Mettre en production**]{.orange} : faire [**vivre**]{.blue2} une application dans l'espace de ses [**utilisateurs**]{.blue2}
    - Notion simple mais mise en oeuvre compliqu√©e !

- D√©passer le stade de l'exp√©rimentation
    - [**Bonnes pratiques**]{.blue2} de d√©veloppement
    - Techniques informatiques d'[**industrialisation**]{.blue2}

- Enjeu : pouvoir jouer le [**r√¥le d'interface**]{.orange} entre m√©tier et √©quipes techniques

## La notion de bonnes pratiques

- [**Origine**]{.blue2} : communaut√© des d√©veloppeurs logiciels

- [**Constats**]{.blue2} :
    - le [_"code est plus souvent lu qu'√©crit"_]{.green2} ([Guido Van Rossum](https://fr.wikipedia.org/wiki/Guido_van_Rossum))
    - la maintenance d'un code est tr√®s co√ªteuse

- [**Cons√©quence**]{.blue2} : un ensemble de [**r√®gles informelles**]{.orange}, conventionnellement accept√©es comme produisant des logiciels [**fiables**]{.orange}, [**√©volutifs**]{.orange} et [**maintenables**]{.orange}

## Pourquoi s'int√©resser aux bonnes pratiques ?

<br>

L'activit√© du *datascientist* tend √† se rapprocher de celle du d√©veloppeur :

- projets [**intenses en code**]{.orange}

- [**projets collaboratifs**]{.orange} et de grande envergure

- [**complexification**]{.orange} des donn√©es et des [**infrastructures**]{.orange}

- [**d√©ploiement**]{.orange} d'applications pour valoriser les analyses

## Contenu du cours

- Voir le code comme un [**outil de communication**]{.orange}
    - [**Contr√¥le de version**]{.blue2} avec Git
    - [**Qualit√©**]{.blue2} du code
    - [**Structure**]{.blue2} des projets

- [**Travail collaboratif**]{.orange} avec Git et GitHub

- Maximiser la [**portabilit√©**]{.orange}

- [**D√©ployer**]{.orange} et [**valoriser**]{.orange} un projet de data science

## Modalit√©s p√©dagogiques

- [**Apprentissage par la pratique**]{.orange}
    - [Application](https://linogaliana.github.io/ensae-reproductibilite-website/chapters/application.html) : industrialisation d'un projet de ML

- [**Langage**]{.orange} : `Python`
    - Langage [**dominant**]{.blue2} dans le monde de la donn√©e
    - Les principes pr√©sent√©s sont [**agnostiques**]{.blue2} au langage

- [**Environnement d'ex√©cution**]{.orange} : [SSP Cloud](https://datalab.sspcloud.fr/)
    - Environnement de d√©veloppement [**normalis√©**]{.blue2}
    - V√©ritable environnement de [**production**]{.blue2}
    - Acquisition des [**bonnes pratiques**]{.blue2}





# Git : rappels

## Pourquoi utiliser Git ?

![](img/timeline.png){fig-align="center" height=475}

[Source](https://thinkr.fr/travailler-avec-git-via-rstudio-et-versionner-son-code/)

## Concepts essentiels

![](img/gitallinone.png){height="400" fig-align="center"}

[Source](http://fabacademy.org/2021/labs/bhubaneswar/students/deepak-chaudhry/ia_PPFP.html)

## Bonnes pratiques {auto-animate=true .smaller}

__Que versionne-t-on ?__

- Essentiellement du [**code source**]{.orange}
- [__Pas d'outputs__]{.orange} (fichiers `.html`, `.pdf`, mod√®les...)
- [__Pas de donn√©es__]{.orange}, d'informations locales ou sensibles

:::{.callout-note}

Pour d√©finir des r√®gles qui √©vitent de committer tel ou tel fichier, on utilise
un fichier nomm√© __`.gitignore`__.

Si on m√©lange du code et des √©l√©ments
annexes (_output_, donn√©es...) dans un m√™me dossier, il [__faut consacrer du temps √† ce fichier__]{.orange}.

Le site [`gitignore.io`](https://www.toptal.com/developers/gitignore) peut vous fournir
des mod√®les.

N'h√©sitez pas √† y ajouter des r√®gles conservatrices (par exemple `*.csv`), 
comme cela est expliqu√© dans [la documentation `utilitR`](https://www.book.utilitr.org/git.html?q=gitignore#gitignore).

:::

## Bonnes pratiques {auto-animate=true .smaller}

__Format des commits__

::: {layout="[40,60]"}

- [**Fr√©quence**]{.orange}
    - Aussi souvent que possible
    - Le lot de modifications doit "faire sens"
- [**Messages**]{.orange}
    - Courts et informatifs (comme un titre de mail)
    - D√©crire [**le pourquoi plut√¥t que le comment**]{.orange} dans le texte

![](img/titre-commit.png)

:::

## En pratique

- Git est un [**logiciel**]{.orange}

- Utilisation en [**ligne de commande**]{.orange}

- Ressources sur le site :
    - [Introduction au terminal Linux](https://linogaliana.github.io/ensae-reproductibilite-website/chapters/linux101.html)
    - [Versionner son code et travailler collaborativement avec Git](https://linogaliana.github.io/ensae-reproductibilite-website/chapters/git.html)

## Application : initialisation du projet

- Consignes sur le [site du cours](https://linogaliana.github.io/ensae-reproductibilite-website/chapters/application.html#partie-0-initialisation-du-projet)



# Qualit√© du code

## Enjeux

- D'une vision utilitariste du code √† une vision du code comme [**outil de communication**]{.orange}

- Favoriser la [**lisibilit√©**]{.orange} et la [**maintenabilit√©**]{.orange}

- Faciliter la [**r√©utilisation**]{.orange}

## Principes g√©n√©raux

- Adopter les [**standards communautaires**]{.orange}

- Utiliser des [**fonctions**]{.orange}

- [**Auto-documenter**]{.orange} son code

## :one: Standards communautaires

- [**Python**]{.blue2} : [PEP8](https://peps.python.org/pep-0008/), [PEP 257](https://peps.python.org/pep-0257/)

- La [**coh√©rence intra-projet**]{.orange} doit toujours primer

## :one: Standards communautaires - Outils {.smaller}

- [**Linters**]{.blue2} : diagnostic de qualit√© du code
    - [Pylint](https://github.com/PyCQA/pylint)

- [**Formatters**]{.blue2} : application automatique des standards
    - [Black](https://github.com/psf/black)

::: {.callout-tip}
- [Exemples d‚Äôerreurs rep√©r√©es]{.blue2} par un _linter_ : 
    + lignes de code trop longues ou mal indent√©es, parenth√®ses non √©quilibr√©es, noms de fonctions mal construits‚Ä¶
- [Exemples d‚Äôerreurs __non__ rep√©r√©es]{.blue2} par un _linter_ :
    + fonctions mal utilis√©es, arguments mal sp√©cifi√©s, structure du code incoh√©rente, code insuffisamment document√©‚Ä¶
:::

## :two: Utiliser des fonctions {.smaller}

::: {.callout-important}
## R√®gle d'or

Il faut utiliser une [**fonction**]{.red2} d√®s qu'on utilise une m√™me
portion de code plus de deux fois ([**_don't repeat yourself_ (DRY)**]{.red2})
:::

- [**Limite les risques d'erreurs**]{.orange} li√©s aux copier/coller
- Rend le code [**plus lisible**]{.orange} et [**plus compact**]{.orange}
- [**Un seul endroit**]{.orange} du code √† modifier lorsqu'on souhaite modifier le traitement
- Facilite la [**r√©utilisation**]{.orange} et la [**documentation**]{.orange} du code !

::: {.callout-tip}
## R√®gles pour √©crire des fonctions **pertinentes**

- Une t√¢che = une fonction
- Une t√¢che complexe = un encha√Ænement de fonctions r√©alisant chacune une t√¢che simple
- Limiter l'utilisation de variables globales.

:::

## :three: Documenter son code

- Documenter le [__pourquoi__]{.orange} plut√¥t que le [__comment__]{.orange}

- Privil√©gier l'[**auto-documentation**]{.orange} via des nommages pertinents

::: {.callout-tip}
## Comment bien documenter un script ?

- [**Minimum**]{.orange} üö¶ : d√©crire ce que le code fait au d√©but du script
- [**Bien**]{.orange} üëç : commenter les parties "d√©licates" du code
- [**Id√©al**]{.orange} üí™ : documenter ses fonctions avec des *docstrings*
:::

## Application : qualit√© du code

- Consignes sur le [site du cours](https://linogaliana.github.io/ensae-reproductibilite-website/chapters/application.html#partie-1-qualit%C3%A9-du-script)





# Structure des projets

## Enjeux

- Favoriser la [**lisibilit√©**]{.orange} et la [**maintenabilit√©**]{.orange}

- Enjeux sp√©cifiques √† la data science
    - [**Exp√©rimentation**]{.blue2}
    - [**Non-lin√©arit√©**]{.blue2}
    - [**Reproductibilit√©**]{.blue2}

## Principes g√©n√©raux

- [**Notebooks**]{.orange} : pour l'[**exploration**]{.blue2} et la [**communication**]{.blue2}

- Pour l'[**industrialisation**]{.orange} : adopter une [**structure modulaire**]{.blue2}

- Adopter les [**standards communautaires**]{.orange}

- [**Documenter**]{.orange} son projet

## :one: Notebooks

- [**Avantages**]{.orange}
  - [**Interactivit√©**]{.blue2} : id√©al pour l'exp√©rimentation
  - [**Communication**]{.blue2} : diffusion de r√©sultats sous forme ex√©cutable

- [**Inconv√©nients**]{.orange}
  - [**Reproductibilit√©**]{.blue2} limit√©e
  - Pas adapt√©s pour l'[**automatisation**]{.blue2}
  - Mal g√©r√©s par le [**contr√¥le de version**]{.blue2}

## :two: Favoriser une structure modulaire

- Principe de [**s√©paration**]{.orange} des [**donn√©es**]{.blue2}, du [**code**]{.blue2} et de la [**configuration**]{.blue2}

- Adopter une structure de [**package**]{.orange}
  - Contient des [**fonctions**]{.blue2} rang√©es dans des [**modules**]{.blue2}
  - Contient √©galement de la [**documentation**]{.blue2}, des [**tests**]{.blue2}, des (m√©ta-)donn√©es...

## :three: Adopter les standards communautaires

- [**Templates**]{.orange} de projets : [**Cookiecutters**]{.blue2}
    - [Cookiecutter Data Science](https://drivendata.github.io/cookiecutter-data-science/)
    - [Cookiecutter Python Package](https://py-pkgs.org/03-how-to-package-a-python#creating-a-package-structure)

- La [**coh√©rence intra-projet**]{.orange} doit toujours primer

## :four: Documenter son projet

- Favoriser l'[**auto-documentation**]{.orange} via des nommages pertinents

- Inclure un fichier `README.md` √† la racine du projet
    - [**Carte d'identit√©**]{.blue2} et [**vitrine**]{.blue2} du projet
    - Pr√©sente le [**contexte**]{.blue2} et le [**fonctionnement**]{.blue2} du projet

## Application : structure du projet

- Consignes sur le [site du cours](https://linogaliana.github.io/ensae-reproductibilite-website/chapters/application.html#partie2)




# Portabilit√©

## "It works... on my machine"

- On a construit un projet [**lisible**]{.orange}, [**structur√©**]{.orange} et [**versionn√©**]{.orange}

- Peut-on [**partager**]{.orange} notre projet ?
    - En th√©orie, oui !
    - En pratique, c'est toujours plus compliqu√©...

. . .

![](img/IWOMM.jpg){fig-align="center"}

## L'enjeu de la portabilit√©

- Un code ne vit jamais dans une bulle isol√©e, il contient en g√©n√©ral de nombreuses [**adh√©rences**]{.orange}
    - Des [**d√©pendances**]{.blue2}
    - Des [**librairies syst√®me**]{.blue2}

- Un code est [**portable**]{.orange} s'il peut √™tre ex√©cut√© dans un environnement diff√©rent que celui du d√©veloppement

- Besoin de nouveaux outils
    - Les [**environnements virtuels**]{.blue2}
    - Les [**conteneurs**]{.blue2}

## Environnements virtuels : introduction

- [**Workflow**]{.orange} classique du data scientist qui commencerait ses premiers projets
    - Installer une distribution de `Python` sur son poste
    - D√©velopper un projet en installant les packages n√©cessaires
    - Passer au projet suivant et ainsi de suite

- Quels [**probl√®me**]{.orange} peuvent se poser ?

## Environnements virtuels : enjeux

- [**Conflits de version**]{.orange} : diff√©rents projets peuvent recqu√©rir des versions diff√©rentes d'un m√™me *package*

- [**Version de Python fixe**]{.orange}, celle de l'installation syst√®me

- [**Reproductibilit√© limit√©e**]{.orange} : difficile de dire quel projet n√©cessite quel package

- [**Portabilit√© limit√©e**]{.orange} : difficile de fixer dans un fichier les d√©pendances sp√©cifiques √† un projet

## Environnements virtuels : fonctionnement

- [**Dossier auto-suffisant**]{.orange} qui contient :
    - Une installation de `Python` pour une version donn√©e ;
    - Des packages additionnels
et qui est [**isol√©**]{.orange} des autres environnements existants

- D√©velopper dans un environnement virtuel vierge est une bonne pratique pour la [**reproductibilit√©**]{.orange}

## Environnements virtuels : impl√©mentations

- Diff√©rentes [**impl√©mentations**]{.orange} en Python
    - L'impl√©mentation standard est `venv`
    - L'impl√©mentation la plus populaire en data science est `conda`

- `conda` est √† la fois
    - Un *package manager* (comme `pip`)
    - Un gestionnaire d'environnements virtuels

## Environnements virtuels : installation

- `conda` est g√©n√©ralement install√© dans le cadre de [**distributions**]{.orange}
    - `Miniconda`
    - `Anaconda`

- `conda` est un outil en ligne de commandes (CLI)

. . .

![](img/conda-eco.png){height="200" fig-align="center"}

## Environnements virtuels : en pratique

- [Exercice guid√©](https://ensae-reproductibilite.netlify.app/portability/#en-pratique)

- [Aide-m√©moire des principales commandes](https://ensae-reproductibilite.netlify.app/portability/#aide-m%c3%a9moire)

## Environnements virtuels : limites

- Les [**librairies syst√®me**]{.orange} ne sont pas g√©r√©es

- Difficile de g√©rer des projets [**multi-langages**]{.orange}

- [**Lourdeur**]{.orange} de la phase d'installation √† chaque changement d'environnement

- Peu adapt√©s √† un environnement de [**production**]{.orange}

## Application : environnements virtuels

- Consignes sur le [site du cours](https://linogaliana.github.io/ensae-reproductibilite-website/chapters/application.html#anaconda)

## Conteneurs : introduction

- Id√©e : au lieu de distribuer la recette pour recr√©er la bonne machine, peut-on [**distribuer directement la bonne machine**]{.orange} ?

- On ne peut pas distribuer des [**machines physiques**]{.orange}

- Les [**machines virtuelles**]{.orange} sont co√ªteuses et complexes √† redistribuer

- Les [**conteneurs**]{.orange} offrent un bon compromis

## Conteneurs vs. machines virtuelles

![](img/docker-vm.png)

Source : [docker.com](https://www.docker.com/resources/what-container/)

## Conteneurs : impl√©mentations

- Plusieurs impl√©mentations des conteneurs

- `Docker` est largement pr√©dominant

. . .

![](img/docker.png){fig-align="center"}

## Docker : installation

- [Instructions](https://docs.docker.com/get-docker/) selon le syst√®me d'exploitation

- Environnement "bac √† sable" : [Play with Docker](https://labs.play-with-docker.com/)

- `Docker` est un outil en ligne de commandes (CLI)

## Docker : fonctionnement

![](img/docker-workflow.png){fig-align="center"}

Source : [k21academy.com](https://k21academy.com/docker-kubernetes/docker-and-kubernetes/)

## Application : conteneurisation avec Docker

- Consignes sur le [site du cours](https://linogaliana.github.io/ensae-reproductibilite-website/chapters/application.html#docker)





# Vers la mise en production

## Motivation

- La [**massification**]{.orange} et la [**diversification**]{.orange} des donn√©es apportent de nombreux changements
    - Le *Data Lake*
    - Le *Data Lab*
    - De nouveaux profils : *Data Scientist*, *Data Engineer*, *Data Architect*

- La majorit√© des projets de data science [**ne sont pas d√©ploy√©s**]{.orange}

- Besoin d'[**industrialisation**]{.orange} qui n√©cessite de nouveaux outils

## L'approche DevOps

- Id√©e : [**unifier**]{.orange} le d√©veloppement (*dev*) et l'administration syst√®me (*ops*)

- But : raccourcir le temps de d√©veloppement en [**d√©ployant en continu**]{.orange} tout en maintenant la qualit√©

. . .

![](img/devops.png){fig-align="center" height=300}

## DevOps, DataOps, MLOps ?

- Le [**DevOps**]{.orange} n'int√®gre pas les sp√©cificit√©s li√©es √† la data science

- [**DataOps**]{.orange} : d√©ploiement et maintenance de [**pipelines de donn√©es**]{.blue2}

- [**MLOps**]{.orange} : d√©ploiement et maintenance de [**mod√®les de Machine Learning**]{.blue2}

- Les [**bonnes pratiques**]{.orange} favorisent la collaboration et facilitent les d√©ploiements

## La mise en production

- On a construit un projet de data science [**reproductible**]{.orange} et conforme aux [**standards**]{.orange} des bonnes pratiques

- Pour [**valoriser**]{.orange} le projet, il faut le [**d√©ployer**]{.orange} dans un environnement en lien avec les utilisateurs
    - Quel est le [**format**]{.blue2} adapt√© pour le valoriser ?
    - Quelle [**infrastructure de production**]{.blue2} ?
    - Comment [**automatiser**]{.blue2} le processus de d√©ploiement ?

## Format de valorisation

- [**Crit√®res**]{.orange} √† prendre en compte :
    - Quels sont les [**utilisateurs**]{.blue2} potentiels ?
    - Seulement de la [**mise √† disposition**]{.blue2}, ou besoin d'[**interactivit√©**]{.blue2} ?
    - Sp√©cificit√©s ML : entra√Ænement en [**batch**]{.blue2} ou [**online**]{.blue2} ?
    - Besoin de [**scalabilit√©**]{.blue2} ?

- [**Formats usuels**]{.orange} : API, application web, dashboard, site internet, rapport automatis√©...

## Exposer un mod√®le via une API REST

- [**API** : **interface**]{.orange} entre l'utilisateur (client) et le mod√®le entra√Æn√©

- [**API REST**]{.orange} : permet de requ√™ter le mod√®le avec une syntaxe simple (HTTP) et de mani√®re *scalable*

. . .

![](img/api-docker.png){fig-align="center"}

## Environnement de production

- D√©pend essentiellement de l'infrastructure √† disposition

- Un [**orchestrateur**]{.orange} de conteneurs r√©pond √† plusieurs besoins :
    - Adapter les ressources ([**scaler**]{.blue2}) selon les besoins
    - [**Monitoring**]{.blue2} de l'√©tat de sant√© des applications
    - D√©ploiements [**reproductibles**]{.blue2} et [**automatis√©s**]{.blue2}

. . .

![](img/kubernetes-logo.png){fig-align="center"}

## Fonctionnement de Kubernetes

![](img/kubernetes-archi.png){fig-align="center"}

## L'approche CI/CD : principes

- [**Int√©gration continue**]{.orange} (CI) : √† chaque modification du code source, l'application est automatiquement [**tested, built and released**]{.blue2}

- [**D√©ploiement continu**]{.orange} (CD) : les nouvelles [**releases**]{.blue2} sont automatiquement d√©ploy√©es

- [**GitOps**]{.orange} : le processus est d√©crit sous formes de [**manifestes**]{.blue2}, stock√©s sur un d√©p√¥t `Git`

## L'approche CI/CD : exemple

![](img/ci-cd.png){fig-align="center"}

## Pipeline complet

- Les donn√©es d'entr√©e ne sont pas fixes, il faut les int√©grer dans un [**pipeline**]{.orange} complet de donn√©es

- La repr√©sentation est faite sous forme de graphes acycliques dirig√©s ([**DAG**]{.orange})

. . .

![](img/pipeline.png){fig-align="center"}

## Conclusion

- On a construit un pipeline [**reproductible**]{.orange}, [**automatis√©**]{.orange} et [**scalable**]{.orange}

![](img/devops.png){fig-align="center" height=300}



