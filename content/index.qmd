---
title: Bonnes pratiques pour les projets de data science
subtitle: |
  **[Romain Avouac, Lino Galiana]{.orange}**
# date: 
slide-number: true
footer: |
  Programme 10 %
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  onyxia-revealjs:
  #onyxia-dark-revealjs:
    output-file: index.html
controls: true
css: custom.css
from: markdown+emoji
---

# Introduction

## Contexte

::: {.incremental}
- [**Qui sommes-nous ?**]{.orange}
    - des [**data scientists**]{.blue2} de l'Insee
    - frustrés par l'[**approche**]{.blue2} souvent purement [**technique**]{.blue2} de la data science
    - convaincus que les [**bonnes pratiques**]{.blue2} valent à être enseignées

- [**Version introductive**]{.blue2} d'un [cours de 3A](https://linogaliana.github.io/ensae-reproductibilite-website/) donné à l'ENSAE

- <romain.avouac@insee.fr>, <lino.galiana@insee.fr>
:::

## La notion de bonnes pratiques

- [**Origine**]{.blue2} : communauté des développeurs logiciels

::: {.incremental}
- [**Constats**]{.blue2} :
    - le [_"code est plus souvent lu qu'écrit"_]{.green2} ([Guido Van Rossum](https://fr.wikipedia.org/wiki/Guido_van_Rossum))
    - la maintenance d'un code est très coûteuse
:::

. . .

- [**Conséquence**]{.blue2} : un ensemble de [**règles informelles**]{.orange}, conventionnellement acceptées comme produisant des logiciels [**fiables**]{.orange}, [**évolutifs**]{.orange} et [**maintenables**]{.orange}


## Pourquoi s'intéresser aux bonnes pratiques ? {.smaller}

<br>

L'activité du *datascientist* tend à se rapprocher de celle du développeur :

. . .

- projets [**intenses en code**]{.orange}

. . .

- [**projets collaboratifs**]{.orange} et de grande envergure

. . .


- [**complexification**]{.orange} des données et donc des [**infrastructures**]{.orange}

. . .

- [**déploiement**]{.orange} d'applications pour valoriser les analyses

## Contenu du cours

::: {.incremental}
- Voir le code comme un [**outil de communication**]{.orange}
    - [**Qualité**]{.blue2} du code
    - [**Structure**]{.blue2} des projets
    - [**Contrôle de version**]{.blue2} avec Git

- [**Travail collaboratif**]{.orange} avec Git et GitHub

- Maximiser la [**portabilité**]{.orange}

- [**Déployer**]{.orange} et [**valoriser**]{.orange} un projet de data science
:::



# Qualité du code

## Enjeux 

::: {.incremental}
- D'une vision utilitariste du code à une vision du code comme [**outil de communication**]{.orange}

- Favoriser la [**lisibilité**]{.orange} et la [**maintenabilité**]{.orange}

- Adopter les [**standards communautaires**]{.orange} du langage
:::

## Standards communautaires

::: {.incremental}
- [**Python**]{.blue2} : [PEP8](https://peps.python.org/pep-0008/), [PEP 257](https://peps.python.org/pep-0257/)

- La [**cohérence intra-projet**]{.orange} doit toujours primer
:::

## Outils

::: {.incremental}
- [**Linters**]{.blue2} : diagnostic de qualité du code
    - [Pylint](https://github.com/PyCQA/pylint)

- [**Formatters**]{.blue2} : application automatique des standards
    - [Black](https://github.com/psf/black)
:::




# Structure des projets

## Enjeux

::: {.incremental}
- Favoriser la [**lisibilité**]{.orange} et la [**maintenabilité**]{.orange}

- Enjeux spécifiques à la data science
    - [**Expérimentation**]{.blue2}
    - [**Non-linéarité**]{.blue2}
    - [**Reproductibilité**]{.blue2}

- Adopter les [**standards communautaires**]{.orange} du langage
:::

## Principes généraux

::: {.incremental}
- Les données sont [**immuables**]{.orange}
    - Pas de modifications manuelles
    - [**Stockage externe**]{.blue2} (ex : S3)

- [**Notebooks**]{.orange} : pour l'[**exploration**]{.orange} et la [**communication**]{.orange}
    - Reproductibilité limitée
    - Mal gérés par le contrôle de version

- Favoriser une structure [**modulaire**]{.orange}
  - Utiliser des [**fonctions**]{.blue2} contenues dans des [**modules**]{.blue2}

- [**(Auto-)documenter**]{.orange} son projet
:::

## Standards communautaires / outils

::: {.incremental}
- [**Python**]{.orange} : [**Cookiecutters**]{.blue2} ([Cookiecutter Data Science](https://drivendata.github.io/cookiecutter-data-science/))

- La [**cohérence intra-projet**]{.orange} doit toujours primer
:::

## Les packages

::: {.incremental}
- Un *package* est la forme maximale de [**modularité**]{.orange}
  - Contient des [**fonctions**]{.blue2} rangées dans des [**modules**]{.blue2}
  - Contient également de la [**documentation**]{.blue2}, des [**tests**]{.blue2}, des (méta-)données... 

- [**Avantages**]{.orange}
  - [**Simple**]{.blue2} à développer
  - Idéal pour favoriser la [**réutilisation**]{.blue2} du code

- [**Inconvénients**]{.orange}
  - Coût de [**maintenance**]{.blue2} élevé
:::




# Conclusion

## Conclusion

- Favoriser la [**réutilisation**]{.orange} du code en le rendant [**lisible**]{.orange} et [**maintenable**]{.orange}

- Des [**outils**]{.orange} simples pour appliquer les [**standards communautaires**]{.orange}

- [**Coût limité**]{.orange} si appliqué dès le début des projets

- Préalable à la mise en production
