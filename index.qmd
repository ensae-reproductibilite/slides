---
title: Mise en production des projets de data science
subtitle: |
  ENSAE 3A - 2023/2024
author:
    - Romain Avouac
    - Lino Galiana
# date: 
slide-number: true
footer: |
  Bonnes pratiques pour la mise en production des projets de data science
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  onyxia-revealjs:
  #onyxia-dark-revealjs:
    incremental: true 
    output-file: index.html
controls: true
css: custom.css
from: markdown+emoji
---

# Introduction

## Contexte

- [**Qui sommes-nous ?**]{.orange}
    - des [**data scientists**]{.blue2} de l'Insee
    - frustrés par l'[**approche**]{.blue2} souvent purement [**technique**]{.blue2} de la data science
    - convaincus que les [**bonnes pratiques**]{.blue2} valent à être enseignées

- <romain.avouac@insee.fr>, <lino.galiana@insee.fr>

## Qu'est ce qu'un data scientist ?

![](img/sexiest-job.png){fig-align="center" height=250}

- Tendance à la [**spécialisation**]{.orange} : *data analyst*, *data engineer*, *ML Engineer*...

- Rôle d'[**interface**]{.orange} entre métier et équipes techniques
    - [**Compétences mixtes**]{.blue2} : savoir métier, modélisation, IT

## La notion de mise en production

- [**Mettre en production**]{.orange} : faire [**vivre**]{.blue2} une application dans l'espace de ses [**utilisateurs**]{.blue2}
    - Notion simple mais mise en oeuvre compliquée !

- [**Dépasser le stade de l'expérimentation**]{.orange}
    - Comprendre les [**besoins**]{.blue2} des utilisateurs
    - [**Bonnes pratiques**]{.blue2} de développement
    - Techniques informatiques d'[**industrialisation**]{.blue2}

## La notion de bonnes pratiques

- [**Origine**]{.blue2} : communauté des développeurs logiciels

- [**Constats**]{.blue2} :
    - le [_"code est plus souvent lu qu'écrit"_]{.green2} ([Guido Van Rossum](https://fr.wikipedia.org/wiki/Guido_van_Rossum))
    - la maintenance d'un code est très coûteuse

- [**Conséquence**]{.blue2} : un ensemble de [**règles informelles**]{.orange}, conventionnellement acceptées comme produisant des logiciels [**fiables**]{.orange}, [**évolutifs**]{.orange} et [**maintenables**]{.orange}

## Pourquoi s'intéresser aux bonnes pratiques ?

<br>

L'activité du *datascientist* tend à se rapprocher de celle du développeur :

- projets [**intenses en code**]{.blue2}

- [**projets collaboratifs**]{.blue2} et de grande envergure

- [**complexification**]{.blue2} des données et des [**infrastructures**]{.blue2}

- [**déploiement**]{.blue2} d'applications pour valoriser les modèles

## Contenu du cours {.scrollable}

- [**Pré-requis**]{.orange}
    - Introduction au terminal `Linux`
    - [**Contrôle de version**]{.blue2} avec `Git`

- [**Bonnes pratiques**]{.orange} de développement
    - [**Travail collaboratif**]{.blue2} avec `Git`
    - [**Qualité**]{.blue2} du code
    - [**Structure**]{.blue2} des projets

- [**Mise en production**]{.orange}
    - Maximiser la [**portabilité**]{.blue2}
    - [**Déployer**]{.blue2} et [**valoriser**]{.blue2} un projet de data science
    - [**MLOps**]{.blue2}

## Site web du cours

- [https://ensae-reproductibilite.github.io/website/](https://ensae-reproductibilite.github.io/website/)

- Tout le contenu du cours est en [***open-source***]{.orange}
    - [GitHub](https://github.com/orgs/ensae-reproductibilite/repositories) {{< fa brands github >}}
    - *Pull Requests* -> bonus {{< fa comment-dollar >}}

## Modalités pédagogiques

- Apprentissage par la pratique
    - [Application](https://ensae-reproductibilite.github.io/website/chapters/application.html) : industrialisation d'un projet de ML

- Langage : `Python` {{< fa brands python >}}
    - Langage [**dominant**]{.blue2} dans le monde de la donnée
    - Les principes présentés sont [**agnostiques**]{.blue2} au langage

- Environnement d'exécution : [SSP Cloud](https://datalab.sspcloud.fr/)
    - Environnement de développement [**normalisé**]{.blue2}
    - Véritable environnement de [**production**]{.blue2}
    - Acquisition des [**bonnes pratiques**]{.blue2}

## Evaluation

- [**Objectif**]{.orange} : mise en pratique [**réaliste**]{.orange} des notions étudiées
    - [**Problématique métier**]{.blue2}
    - [**Données réelles**]{.blue2}

- Evaluation en [**deux parties**]{.orange} :
    - [**En groupe**]{.blue2} : [**projet**]{.blue2} à construire selon 3 "parcours"
    - [**Individuel**]{.blue2} : [**revue de code**]{.blue2} d'un autre projet








# Le travail collaboratif avec `Git`

## Pourquoi utiliser Git ?

![](img/timeline.png){fig-align="center" height=475}

[Source](https://thinkr.fr/travailler-avec-git-via-rstudio-et-versionner-son-code/)

## Concepts essentiels

![](img/gitallinone.png){height="400" fig-align="center"}

[Source](http://fabacademy.org/2021/labs/bhubaneswar/students/deepak-chaudhry/ia_PPFP.html)

## Bonnes pratiques {auto-animate=true .smaller}

__Que versionne-t-on ?__

- Essentiellement du [**code source**]{.orange}
- [__Pas d'outputs__]{.orange} (fichiers `.html`, `.pdf`, modèles...)
- [__Pas de données__]{.orange}, d'informations locales ou sensibles

. . .

:::{.callout-note}

Pour définir des règles qui évitent de committer tel ou tel fichier, on utilise
un fichier nommé __`.gitignore`__.

Si on mélange du code et des éléments
annexes (_output_, données...) dans un même dossier, il [__faut consacrer du temps à ce fichier__]{.orange}.

Le site [`gitignore.io`](https://www.toptal.com/developers/gitignore) peut vous fournir
des modèles.

N'hésitez pas à y ajouter des règles conservatrices (par exemple `*.csv`), 
comme cela est expliqué dans [la documentation `utilitR`](https://www.book.utilitr.org/git.html?q=gitignore#gitignore).

:::

## Bonnes pratiques {auto-animate=true .smaller}

__Format des commits__

::: {layout="[40,60]"}

- [**Fréquence**]{.orange}
    - Aussi souvent que possible
    - Le lot de modifications doit "faire sens"
- [**Messages**]{.orange}
    - Courts et informatifs (comme un titre de mail)
    - Décrire [**le pourquoi plutôt que le comment**]{.orange} dans le texte

![](img/titre-commit.png)

:::

## Outils pour le travail collaboratif

- L'éco-système `Git` [**facilite** le travail collaboratif]{.blue2}
    - `Git` {{< fa brands git-alt >}} : modèle des [__branches__]{.orange}
    - `GitHub` {{< fa brands github >}} / `GitLab` {{< fa brands gitlab >}} : [**Issues**, **Pull Requests**, **Forks**]{.orange}

## Le modèle des branches

::: {layout="[[-1], [1], [-1]]"}
![](img/branches.png){fig-align="center" height=350}
:::

## Les outils de contribution

- [***Issue***]{.orange} : soumettre un [**problème**]{.blue2} ou une [**suggestion**]{.blue2} aux développeurs d'un projet

- [***Pull Request***]{.orange} : proposer aux développeurs d'un projet d'[**intégrer des modifications**]{.blue2}

- [***Fork***]{.orange} : faire la [**copie**]{.blue2} d'un projet existant dans son espace personnel
    - Indispensable pour faire une *pull request* à un dépôt sur lequel on n'a pas les droits 

## Une organisation courante : le *GitHub flow*

![](img/ghflow.png)

Description plus détaillée : [ici](https://docs.github.com/en/get-started/quickstart/github-flow)







# Qualité du code

## Enjeux

- D'une vision utilitariste du code à une vision du code comme [**outil de communication**]{.orange}

- Favoriser la [**lisibilité**]{.orange} et la [**maintenabilité**]{.orange}

- Faciliter la [**réutilisation**]{.orange}

## Principes généraux

- Adopter les [**standards communautaires**]{.orange}

- Utiliser des [**fonctions**]{.orange}

- [**(Auto-)documenter**]{.orange} son code

## :one: Standards communautaires

> *"Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread"*
>
> [Tidyverse Style Guide (R)](https://style.tidyverse.org/)

- [**Python**]{.blue2} : [PEP8](https://peps.python.org/pep-0008/), [PEP 257](https://peps.python.org/pep-0257/)
    - Des règles *opinionated*, mais [**conventionnelles**]{.blue2}

- La [**cohérence intra-projet**]{.orange} doit toujours primer

## :one: Standards communautaires - Outils {.smaller}

- [**Linters**]{.blue2} : diagnostic de qualité du code
    - [Pylint](https://github.com/PyCQA/pylint)

- [**Formatters**]{.blue2} : application automatique des standards
    - [Black](https://github.com/psf/black)

. . .

::: {.callout-tip}
- [Exemples d’erreurs repérées]{.blue2} par un _linter_ : 
    + lignes de code trop longues ou mal indentées, parenthèses non équilibrées, noms de fonctions mal construits…
- [Exemples d’erreurs __non__ repérées]{.blue2} par un _linter_ :
    + fonctions mal utilisées, arguments mal spécifiés, structure du code incohérente, code insuffisamment documenté…
:::

## :two: Utiliser des fonctions {.smaller}

::: {.callout-important}
## Règle d'or

Il faut utiliser une [**fonction**]{.red2} dès qu'on utilise une même
portion de code plus de deux fois ([**_don't repeat yourself_ (DRY)**]{.red2})
:::

- [**Limite les risques d'erreurs**]{.orange} liés aux copier/coller
- Rend le code [**plus lisible**]{.orange} et [**plus compact**]{.orange}
- [**Un seul endroit**]{.orange} du code à modifier lorsqu'on souhaite modifier le traitement
- Facilite la [**réutilisation**]{.orange} et la [**documentation**]{.orange} du code !

. . .

::: {.callout-tip}
## Règles pour écrire des fonctions **pertinentes**

- Une tâche = une fonction
- Une tâche complexe = un enchaînement de fonctions réalisant chacune une tâche simple
- Limiter l'utilisation de variables globales.

:::

## :three: Documenter son code

- Documenter le [__pourquoi__]{.orange} plutôt que le [__comment__]{.orange}

- Privilégier l'[**auto-documentation**]{.orange} via des nommages pertinents

. . .

::: {.callout-tip}
## Comment bien documenter un script ?

- [**Minimum**]{.orange} 🚦 : décrire ce que le code fait au début du script
- [**Bien**]{.orange} 👍 : commenter les parties "délicates" du code
- [**Idéal**]{.orange} 💪 : documenter ses fonctions avec des *docstrings*
:::





# Structure des projets

## Enjeux

- Favoriser la [**lisibilité**]{.orange} et la [**maintenabilité**]{.orange}

- Enjeux spécifiques à la data science
    - [**Expérimentation**]{.blue2}
    - [**Non-linéarité**]{.blue2}
    - [**Reproductibilité**]{.blue2}

## Principes généraux

- Favoriser une [**structure modulaire**]{.blue2} selon l'état du projet
    - [**Exploration**]{.orange} : travail à partir de [**notebooks**]{.blue2}
    - [**Industrialisation**]{.orange} : adopter une structure type [**paclage**]{.blue2}

- Adopter les [**standards communautaires**]{.orange}

- [**(Auto-)documenter**]{.orange} son projet

## :one: Phase d'exploration : *notebooks*

- [**Avantages**]{.orange}
  - [**Interactivité**]{.blue2} : idéal pour l'expérimentation
  - [**Communication**]{.blue2} : diffusion de résultats sous forme exécutable

- [**Inconvénients**]{.orange}
  - [**Reproductibilité**]{.blue2} généralement limitée
  - Pas adaptés pour l'[**automatisation**]{.blue2}
  - Mal gérés par le [**contrôle de version**]{.blue2}

## :two: Industrialisation : structure modulaire

- [**Premier niveau**]{.orange} : structuration du [**code**]{.orange}

- Adopter une structure type [**package**]{.orange}
  - Des [**fonctions**]{.blue2} rangées dans des [**modules**]{.blue2}
  - Un script principal (`main`) [**orchestre**]{.blue2} les traitements
  - Utilisation de [**chemins relatifs**]{.blue2} uniquement

## :two: Industrialisation : structure modulaire

- [**Deuxième niveau**]{.orange} : structuration du [**projet**]{.orange}

. . .

![](img/project-modularity.png){fig-align="center" height=350}

## :three: Adopter les standards communautaires

- [**Templates**]{.orange} de projets : [**Cookiecutters**]{.blue2}
    - [Cookiecutter Data Science](https://drivendata.github.io/cookiecutter-data-science/)
    - [Cookiecutter Python Package](https://py-pkgs.org/03-how-to-package-a-python#creating-a-package-structure)

- La [**cohérence intra-projet**]{.orange} doit toujours primer

## :four: Documenter son projet

- Favoriser l'[**auto-documentation**]{.orange} via des nommages pertinents

## L'auto-documentation : illustration

```
├── report.ipynb
├── correlation.png
├── data.csv
├── data2.csv
├── fig1.png
├── figure 2 (copy).png
├── report.pdf
├── partial data.csv
├── script.py
└── script_final.py
```

- Difficile de rentrer dans le projet...
    - Tout au [**même niveau**]{.blue2}
    - Titres [**non informatifs**]{.blue2}

## L'auto-documentation : illustration 

```
├── data
│   ├── raw
│   │   ├── data.csv
│   │   └── data2.csv
│   └── interim
│       └── partial data.csv
├── notebooks
│   └── report.ipynb
├── src
|   ├── script.py
│   └── script_final.py
└── reports
    ├── report.pdf
    └── figures
        ├── fig1.png
        ├── figure 2 (copy).png
        ├── figure10.png
        └── correlation.png
```

- Une structure déjà plus lisible !
    - Les titres restent [**non informatifs**]{.blue2}

## L'auto-documentation : illustration 

```
├── data
│   ├── raw
│   │   ├── dpe_logement_202103.csv
│   │   └── dpe_logement_202003.csv
│   └── interim
│       └── dpe_logement_merged_preprocessed.csv
├── notebooks
│   └── report.ipynb
├── src
|   ├── main.R
|   ├── preprocessing.R
│   └── generate_plots.R
└── reports
    ├── report.pdf
    └── figures
        ├── histogram_energy_diagnostic.png
        ├── barplot_consumption_pcs.png
        ├── correlation_matrix.png
        └── correlation.png
```

- Une structure [**auto-documentée**]{.blue2}
    - On comprend le projet sans même lire le code

## :four: Documenter son projet

- Favoriser l'[**auto-documentation**]{.orange} via des nommages pertinents

- Inclure un fichier `README.md` à la racine du projet
    - [**Carte d'identité**]{.blue2} et [**vitrine**]{.blue2} du projet
    - Présente le [**contexte**]{.blue2} et le [**fonctionnement**]{.blue2} du projet

- Si [**open-source**]{.orange} : inclure une [licence](https://docs.github.com/fr/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)






# Application

## Bonnes pratiques de développement

- Consignes sur le [site du cours](https://ensae-reproductibilite.github.io/website/chapters/application.html)
    - Partie :zero: : initialisation de l'environnement et du projet
    - Partie :one: : qualité du code
    - Partie :two: : adoption d'une structure modulaire







# Portabilité

## "It works... on my machine"

- On a construit un projet [**lisible**]{.orange}, [**structuré**]{.orange} et [**versionné**]{.orange}

- Peut-on [**partager**]{.orange} notre projet ?
    - En théorie, oui !
    - En pratique, c'est toujours plus compliqué...

. . .

![](img/IWOMM.jpg){fig-align="center"}

## L'enjeu de la portabilité

- Un code ne vit jamais dans une bulle isolée, il contient en général de nombreuses [**adhérences**]{.orange}
    - Des [**dépendances**]{.blue2}
    - Des [**librairies système**]{.blue2}

- Un code est [**portable**]{.orange} s'il peut être exécuté dans un environnement différent que celui du développement

- Besoin de nouveaux outils
    - Les [**environnements virtuels**]{.blue2}
    - Les [**conteneurs**]{.blue2}

## Environnements virtuels : introduction

- [**Workflow**]{.orange} classique du data scientist qui commencerait ses premiers projets
    - Installer une distribution de `Python` sur son poste
    - Développer un projet en installant les packages nécessaires
    - Passer au projet suivant et ainsi de suite

- Quels [**problème**]{.orange} peuvent se poser ?

## Environnements virtuels : enjeux

- [**Conflits de version**]{.orange} : différents projets peuvent recquérir des versions différentes d'un même *package*

- [**Version de Python fixe**]{.orange}, celle de l'installation système

- [**Reproductibilité limitée**]{.orange} : difficile de dire quel projet nécessite quel package

- [**Portabilité limitée**]{.orange} : difficile de fixer dans un fichier les dépendances spécifiques à un projet

## Environnements virtuels : fonctionnement

- [**Dossier auto-suffisant**]{.orange} qui contient :
    - Une installation de `Python` pour une version donnée ;
    - Des packages additionnels
et qui est [**isolé**]{.orange} des autres environnements existants

- Développer dans un environnement virtuel vierge est une bonne pratique pour la [**reproductibilité**]{.orange}

## Environnements virtuels : implémentations

- Différentes [**implémentations**]{.orange} en Python
    - L'implémentation standard est `venv`
    - L'implémentation la plus populaire en data science est `conda`

- `conda` est à la fois
    - Un *package manager* (comme `pip`)
    - Un gestionnaire d'environnements virtuels

## Environnements virtuels : installation

- `conda` est généralement installé dans le cadre de [**distributions**]{.orange}
    - `Miniconda`
    - `Anaconda`

- `conda` est un outil en ligne de commandes (CLI)

. . .

![](img/conda-eco.png){height="200" fig-align="center"}

## Environnements virtuels : limites

- Les [**librairies système**]{.orange} ne sont pas gérées

- Difficile de gérer des projets [**multi-langages**]{.orange}

- [**Lourdeur**]{.orange} de la phase d'installation à chaque changement d'environnement

- Peu adaptés à un environnement de [**production**]{.orange}






## Application : environnements virtuels

- Consignes sur le [site du cours](https://linogaliana.github.io/ensae-reproductibilite-website/chapters/application.html#anaconda)

## Conteneurs : introduction

- Idée : au lieu de distribuer la recette pour recréer la bonne machine, peut-on [**distribuer directement la bonne machine**]{.orange} ?

- On ne peut pas distribuer des [**machines physiques**]{.orange}

- Les [**machines virtuelles**]{.orange} sont coûteuses et complexes à redistribuer

- Les [**conteneurs**]{.orange} offrent un bon compromis

## Conteneurs vs. machines virtuelles

![](img/docker-vm.png)

Source : [docker.com](https://www.docker.com/resources/what-container/)

## Conteneurs : implémentations

- Plusieurs implémentations des conteneurs

- `Docker` est largement prédominant

. . .

![](img/docker.png){fig-align="center"}

## Docker : installation

- [Instructions](https://docs.docker.com/get-docker/) selon le système d'exploitation

- Environnement "bac à sable" : [Play with Docker](https://labs.play-with-docker.com/)

- `Docker` est un outil en ligne de commandes (CLI)

## Docker : fonctionnement

![](img/docker-workflow.png){fig-align="center"}

Source : [k21academy.com](https://k21academy.com/docker-kubernetes/docker-and-kubernetes/)

## Application : conteneurisation avec Docker

- Consignes sur le [site du cours](https://linogaliana.github.io/ensae-reproductibilite-website/chapters/application.html#docker)





# Vers la mise en production

## Motivation

- La [**massification**]{.orange} et la [**diversification**]{.orange} des données apportent de nombreux changements
    - Le *Data Lake*
    - Le *Data Lab*
    - De nouveaux profils : *Data Scientist*, *Data Engineer*, *Data Architect*

- La majorité des projets de data science [**ne sont pas déployés**]{.orange}

- Besoin d'[**industrialisation**]{.orange} qui nécessite de nouveaux outils

## L'approche DevOps

- Idée : [**unifier**]{.orange} le développement (*dev*) et l'administration système (*ops*)

- But : raccourcir le temps de développement en [**déployant en continu**]{.orange} tout en maintenant la qualité

. . .

![](img/devops.png){fig-align="center" height=300}

## DevOps, DataOps, MLOps ?

- Le [**DevOps**]{.orange} n'intègre pas les spécificités liées à la data science

- [**DataOps**]{.orange} : déploiement et maintenance de [**pipelines de données**]{.blue2}

- [**MLOps**]{.orange} : déploiement et maintenance de [**modèles de Machine Learning**]{.blue2}

- Les [**bonnes pratiques**]{.orange} favorisent la collaboration et facilitent les déploiements

## La mise en production

- On a construit un projet de data science [**reproductible**]{.orange} et conforme aux [**standards**]{.orange} des bonnes pratiques

- Pour [**valoriser**]{.orange} le projet, il faut le [**déployer**]{.orange} dans un environnement en lien avec les utilisateurs
    - Quel est le [**format**]{.blue2} adapté pour le valoriser ?
    - Quelle [**infrastructure de production**]{.blue2} ?
    - Comment [**automatiser**]{.blue2} le processus de déploiement ?

## Format de valorisation

- [**Critères**]{.orange} à prendre en compte :
    - Quels sont les [**utilisateurs**]{.blue2} potentiels ?
    - Seulement de la [**mise à disposition**]{.blue2}, ou besoin d'[**interactivité**]{.blue2} ?
    - Spécificités ML : entraînement en [**batch**]{.blue2} ou [**online**]{.blue2} ?
    - Besoin de [**scalabilité**]{.blue2} ?

- [**Formats usuels**]{.orange} : API, application web, dashboard, site internet, rapport automatisé...

## Exposer un modèle via une API REST

- [**API** : **interface**]{.orange} entre l'utilisateur (client) et le modèle entraîné

- [**API REST**]{.orange} : permet de requêter le modèle avec une syntaxe simple (HTTP) et de manière *scalable*

. . .

![](img/api-docker.png){fig-align="center"}

## Environnement de production

- Dépend essentiellement de l'infrastructure à disposition

- Un [**orchestrateur**]{.orange} de conteneurs répond à plusieurs besoins :
    - Adapter les ressources ([**scaler**]{.blue2}) selon les besoins
    - [**Monitoring**]{.blue2} de l'état de santé des applications
    - Déploiements [**reproductibles**]{.blue2} et [**automatisés**]{.blue2}

. . .

![](img/kubernetes-logo.png){fig-align="center"}

## Fonctionnement de Kubernetes

![](img/kubernetes-archi.png){fig-align="center"}

## L'approche CI/CD : principes

- [**Intégration continue**]{.orange} (CI) : à chaque modification du code source, l'application est automatiquement [**tested, built and released**]{.blue2}

- [**Déploiement continu**]{.orange} (CD) : les nouvelles [**releases**]{.blue2} sont automatiquement déployées

- [**GitOps**]{.orange} : le processus est décrit sous formes de [**manifestes**]{.blue2}, stockés sur un dépôt `Git`

## L'approche CI/CD : exemple

![](img/ci-cd.png){fig-align="center"}

## Pipeline complet

- Les données d'entrée ne sont pas fixes, il faut les intégrer dans un [**pipeline**]{.orange} complet de données

- La représentation est faite sous forme de graphes acycliques dirigés ([**DAG**]{.orange})

. . .

![](img/pipeline.png){fig-align="center"}

## Conclusion

- On a construit un pipeline [**reproductible**]{.orange}, [**automatisé**]{.orange} et [**scalable**]{.orange}

. . .

![](img/devops.png){fig-align="center" height=300}
